8.1 Introduction
Regular expressions (or regex) define a search pattern. They are similar to globbing in that they can be expanded to match certain sequences of characters in text, but have more variety and power.

A regex pattern is composed of literal characters and operators.

A literal character in a pattern represents the character itself. It has no special meaning, and no substitution is performed. Literal characters include letters, numbers, some punctuation characters, and basically any other character that is not an operator.

An operator is a special character or character sequence that has special meaning. Operators give regular expressions their superpowers! Operators are sometimes referred to as metacharacters. The word “operator” more readily conveys transformative action, so we will use that term in this chapter.

A regular expression has two common forms: basic and extended. Extended regular expressions support more operators than their basic counterparts. Most commands that can use regular expressions can interpret basic regular expressions. Extended regular expressions are not available for all commands and may require an additional option for them to work correctly.

The man page for regex is a good source of information to learn about basic vs. extended regex, the syntax for regex, and regex compatibility:

sysadmin@localhost:~$ man regex

The examples displayed in this chapter will make use of the grep command to demonstrate regular expressions. The grep command is able to filter text from data, providing a very visual demonstration of how regular expressions work. The grep command that will be used is actually an alias that runs grep --color so that the text that matches will be displayed in a red color.

Note

Unlike globs, regular expressions are only supported by a small set of commands. This is because glob expansion is usually provided by the shell; the command (in most cases) does not need to worry about the implementation of glob expansion.

On the other hand, commands that support regular expressions must implement regular expression logic, and all the complexity and extra code that comes with them.

Important

The pattern argument of a command should be protected by strong quotes to prevent the shell from misinterpreting them as special shell characters. This means that you should place single quotes ' around a regular expression. The following example demonstrates how not placing single quotes around special characters will result in unexpected output, which is resolved by adding single quotes:

sysadmin@localhost:~$ echo Use single quotes around characters like $ & * ; .

8.2 Basic Regular Expressions
The simplest of all regular expressions just use literal characters, such as alphanumeric characters. For example, to locate all lines of the /etc/passwd file that contain the expression root, use the following command:

sysadmin@localhost:~$ grep 'root' /etc/passwd

Although very useful for the grep command, literal characters alone provide no wildcarding or special matching capabilities. For that, let’s introduce the operators that are available in basic regular expressions.

Basic Regex	Operator	Meaning
Period operator	.	Matches any one single character.
List operator [ ] or [^ ] Defines a list or range of literal characters that can match one character. If the first character is the negation ^ operator, it matches any character that is not in the list.

Asterisk operator	*	Matches zero or more instances of the previous character.

Front anchor operator	^	If ^ is the first character in the pattern, then the entire pattern must be present at the beginning of the line to match. If ^ is not the first character, then it is treated as an ordinary literal ^ character.

Back anchor operator	$	If $ is the last character in the pattern, then the pattern must be at the end of the line to match, otherwise, it is treated as a literal $ character.

8.2.1 Anchoring
The front anchor ^ operator can be used to ensure that a pattern appears at the beginning of the line. For example, to find all lines in /etc/passwd that start with root, use the ^root pattern. Note that the ^ operator must be the first character in the pattern to be effective.

sysadmin@localhost:~$ grep ^root /etc/passwd

The back anchor $ operator can be used to ensure a pattern appears at the end of the line, thereby effectively reducing the search results. To find the lines that end with an r in the alpha-first.txt file, use the r$ pattern:

sysadmin@localhost:~$ cd Documents
sysadmin@localhost:~/Documents$ grep 'r$' alpha-first.txt

Pattern	Meaning
^Hello	Matches any line that begins with the Hello string
World$	Matches any line that ends with the World string
^Hello World$	Matches any line which matches the Hello World string exactly

8.2.2 Match a Single Character With .
One of the most useful matching capabilities is provided by the period . operator. It will match any character except for the new line character.

The r..t pattern will find any line that contained the letter r followed by exactly two characters (which can be any character except a newline) and then the letter t:

sysadmin@localhost:~/Documents$ grep r..t red.txt
root
sysadmin@localhost:~/Documents$ grep r..f red.txt
reef
roof
sysadmin@localhost:~/Documents$ grep r..d red.txt
reed
read
sysadmin@localhost:~/Documents$ grep r.d red.txt
red
rod

8.2.3 Match a Single Character With [ ]
The list [ ] operator works in regular expressions similar to how they work in glob expressions; they match a single character from the list or range of possible characters contained within the brackets.

To find all the lines in the profile.txt file that have a number in them, use either the [0123456789] or [0-9] pattern:

sysadmin@localhost:~/Documents$ cat profile.txt | grep [0-9]

To find all the lines which contain any non-numeric characters, insert the negation ^ operator as the first character inside the brackets. This negates the characters listed:

sysadmin@localhost:~/Documents$ cat profile.txt | grep [^0-9]

When other regular expression operators are placed inside of the list [ ] operators, they are treated as literal characters. For example, the . character normally matches any one character, but when placed inside the square brackets, then it will just match the . character itself. In the example, only lines which contain the literal . character are matched.

sysadmin@localhost:~/Documents$ cat profile.txt | grep [.]

8.2.4 Match a Single Character With *
The asterisk * operator is used to match zero or more occurrences of the character preceding it. For example, the e* pattern would match zero or more occurrences of the e character:

cat red.txt | grep 're*d'
red
reeed
rd
reed

cat red.txt | grep 'r[oe]*d'

In order to make the asterisk * operator useful, it is necessary to create a pattern which includes more than just the one character preceding the asterisk * operator. For example, the results above can be refined by adding another e to make the pattern ee* effectively matching every line which contains at least one e.

sysadmin@localhost:~/Documents$ cat red.txt | grep 'ee*'

Pattern	Meaning
abc*	Matches the ab string followed by one or more c characters
a*	Matches zero or more occurrences of the a character
aa*	Matches one or more occurrences of the a character
[A-Z][aeiou]*	Matches a single capital letter followed by one or more vowel characters

8.3 Extended Regular Expressions
While most commands that use regular expressions can interpret basic regular expressions, the use of extended regular expressions often requires a special option be provided to the command to recognize them.

Extended regular expression patterns support the basic regex operators PLUS the following additional operators:

Extended Regex	Operators	Meaning
Grouping operator	( )	Groups characters together to form a subpattern.
Asterisk operator	*	Previous character (or subpattern) is present zero or more times.
Plus operator	+	Previous character (or subpattern) is present at least one or more times.
Question mark operator	?	Previous character (or subpattern) is present zero or one time (but not more).
Curly brace operator	{,}	Specify minimum, maximum, or exact matches of the previous character (or subpattern).
Alternation operator	|	Logical OR of choices. For example, abc|def|xyz matches abc or def or xyz.
The grep command understands both basic and extended regular expressions. By default, the grep command assumes only basic regular expressions, meaning the +, ?, {, |, (, and ) operators are interpreted as literal characters.

Historically, there is a command called egrep, which is similar to the grep command, but can understand extended regular expressions. Now, the egrep command is deprecated in favor of using grep with the -E option.

8.3.1 Grouping With ( )
The grouping ( ) operator creates groupings that can be used for several purposes. At the most basic level, they are used to group together characters that can be targeted by matching operators like *, +, ?, or the curly braces { }.

This grouping is considered to be a subpattern of the pattern. A subpattern is a smaller pattern within a pattern. The matching operators *, ?, +, and { } that match single characters, can also be applied to subpatterns.

In the example below, parentheses are used to match the M character, followed by the iss subpattern repeated zero or more times:

sysadmin@localhost:~/Documents$ echo 'Miss Mister Mississippi Missed Mismatched' | grep -E 'M(iss)*'
Miss Mister Mississippi Missed Mismatched
Note

Don't forget to use grep -E in order to get the command to recognize the extended regular expression character.

8.3.2 Match a Repeated Character With +
Another solution to the problems of using the asterisk * operator is to use the extended regex plus + operator, instead. This matches at least one of the previous characters, instead of zero, so it is much more selective. For example, the e+ pattern would only match if the text contained one or more e characters, yielding the same results as the previously used ee* pattern:

sysadmin@localhost:~/Documents$ cat red.txt | grep -E 'e+'
red
reef
reeed
reed
reel
read
sysadmin@localhost:~/Documents$ cat red.txt | grep -E 're+d'
red
reed
reed
In the example below, grouping is used in conjunction with the + operator to match the recurring iss subpattern:

sysadmin@localhost:~/Documents$ echo 'Miss Mississippi missed her mister.' | grep -E '(iss)+'
Miss Mississippi missed her mister.
Pattern	Meaning
xyz+	Matches the xy string followed by one or more of the z character
(xyz)+	Matches one or more copies of the xyz string

8.3.3 Match an Optional Character With ?
The extended regex question mark ? operator matches the preceding character or grouping zero or one times, making it optional. For example, consider the word color, which can also be spelled with an optional u as colour (depending on the English dialect being used). Use the colou?r pattern to match either spelling:

sysadmin@localhost:~/Documents$ grep -E 'colou?r' spelling.txt
American English: Do you consider gray to be a color or a shade?
British English: Do you consider grey to be a colour or a shade?
Pattern	Meaning
xyz?	Matches the xy string followed by zero or one of the z character
x(yz)?	Matches the x character followed by zero or one of the yz string

8.3.4 Match a Repeated Character With { }
The extended regex curly brace { } operator is used to specify the number of occurrences of the preceding character or subpattern.

Pattern	Meaning
a{0,}	Zero or more a characters
a{1,}	One or more a characters
a{0,1}	Zero or one a characters
a{5}	Five a characters
a{,5}	Five or fewer a characters
a{3,5}	From three to five a characters
To demonstrate, the { } operator in action, the example below matches one or more instances of the letter r in the animals.txt file:

sysadmin@localhost:~/Documents$ grep -E 'r{1,}' animals.txt
1 retriever
2 badger

8.3.4.1 Comparing Quantifiers
The *, +, ?, and { } characters are considered to be quantifying operators. The curly braces { } can be used instead of the other quantifiers. The following chart illustrates some examples of using curly braces:

Pattern	Meaning
xyz*

xyz{0,}

Matches the xy string followed by zero or more of the z character
x(yz)*

x(yz){0,}

Matches the x character followed by zero or more copies of the yz string
xyz+

xyz{1,}

Matches the xy string followed by one or more of the z character
(xyz)+

(xyz){1,}

Matches one or more copies of the xyz string
xyz?

xyz{0,1}

Matches the xy string followed by zero or one of the z character
xyz{,5}

Matches the xy string followed by five or fewer of the z character
xyz{5,}

Matches the xy string followed by five or more of the z character
xyz{3,5}

Matches the xy string followed by three to five of the z character
[0-9]{1,3}%

Matches one to three numeric characters, followed by the % character


8.3.5 Match Subpatterns With |
When used in extended regular expressions, the alternation | operator separates alternative expressions that can match. It acts similarly to a Boolean OR.

For example, to match both the word gray or its alternative spelling grey, use the expression gray|grey:

sysadmin@localhost:~/Documents$ grep -E 'gray|grey' spelling.txt
American English: Do you consider gray to be a color or a shade?
British English: Do you consider grey to be a colour or a shade?
Parentheses can also be used with alternation. The previous example of gray|grey could be rewritten as gr(a|e)y. When parentheses are used in regular expressions from the command line, remember to enclose them in the single quotes to prevent the shell from interpreting them:

sysadmin@localhost:~/Documents$ grep -E 'gr(a|e)y' spelling.txt
American English: Do you consider gray to be a color or a shade?
British English: Do you consider grey to be a colour or a shade?
Pattern	Meaning
abc|xyz	Matches the abc string or the xyz string
ab(c|d|e)

ab[cde]

Matches the ab string followed by a c or d or e character

8.4 Using Special Regular Expression Sequences
In basic regular expressions putting a backslash \ character in front of another character means to match that character literally. For example, matching the . character with the \. pattern is appropriate.

However, the backslash \ character can also be used for designated backslash character combinations, called backslash sequences. Backslash sequences can represent special operators or character classes, as illustrated in the following chart.

A character class represents a range of characters. The digit character class (abbreviated \d) matches any number [0-9]. The word character class (abbreviated \w) matches any upper and lowercase ASCII character, and numeric digits [A-Za-z0-9]. More character classes will be introduced in the extended regular expressions section.

Backslash Sequence	Pattern Equivalent	Matches
\b		Word boundary operator
\B		Not a word boundary operator
\w	[A-Za-z0-9]	Word character class
\W	[^A-Za-z0-9]	Not a word character class
\d	[0-9]	Digit character class
\s		Whitespace character class
\S		Not a whitespace character class
\\		Literal backslash character
To demonstrate this concept, take into consideration that words in files don't always have whitespace around them, sometimes there are commas or other punctuation marks before or after a word. The \b operator can help identify the edges of words that don't have whitespace around them. Problems like the following may occur if the word boundary operator is not used:

sysadmin@localhost:~/Documents$ echo 'This is useful' | sed 's/is/was/'
Thwas is useful
Note

Recall that to do a simple search and replace operation with the sed command, use the following script, or expression:

s/PATTERN/REPLACEMENT/
In the syntax above, the s character signifies substitution and the forward slash / character is used as a delimiter.

Notice that the sed command searched its input for is and replaced it with was. It didn't limit its replacement to the is that was a separate word, it also affected part of the word This replacing it with Thwas.

It would be better to use the \bis\b search criteria (the is pattern with word boundaries around it) to match the word is:

sysadmin@localhost:~/Documents$ echo 'This is useful' | sed 's/\bis\b/was/'
This was useful
To delete certain text, the sed command can be used to remove characters defined within square brackets.

For example, if you wanted to delete the leading numbers in the animals.txt file and create a new file without the numbers, you could use the sed command and define the range 0-9 to be removed:

sysadmin@localhost:~/Documents$ cat animals.txt
1 retriever
2 badger
3 bat
4 wolf
5 eagle
sysadmin@localhost:~/Documents$ sed 's/[0-9]//g' animals.txt > newanimals.txt
sysadmin@localhost:~/Documents$ cat newanimals.txt
 retriever
 badger
 bat
 wolf
 eagle
Consider This

In some commands, parentheses can be used for referring back to what was matched. What was matched by the first set of parentheses can be referred to as \1, the second as \2, and so on. For example, if you had a file that contained a list of people with their first name and then their last name, you could reverse the names with a comma between them with the following sed command:

sysadmin@localhost:~/Documents$ cat people.csv
Dennis,Richie
Andrew,Tanenbaum
Ken,Thompson
Linus,Torvalds
sysadmin@localhost:~/Documents$ sed -r 's/(\w+),(\w+)/\2, \1/' people.csv
Richie, Dennis
Tanenbaum, Andrew
Thompson, Ken
Torvalds, Linus
The -r option to the sed command indicates the use of extended regular expressions.

8.5 Escaping Special Characters With \
In some cases, you may want to match a character that functions as an operator as a literal character. For example, consider the newhome.txt file:

sysadmin@localhost:~/Documents$ cat newhome.txt
Thanks for purchasing your new home!!

**Warning** it may be haunted.

There are three bathrooms.

**Beware** of the ghost in the bedroom.

The kitchen is open for entertaining.

**Caution** the spirits don't like guests.

Good luck!!!
The asterisk * character functions an operator, so searching for the re* pattern matches every line which contained an r character, followed by zero or more of the e character (which means it matches any line containing an r character).

sysadmin@localhost:~/Documents$ grep 're*' newhome.txt
Thanks for purchasing your new home!!
**Warning** it may be haunted.
There are three bathrooms.
**Beware** of the ghost in the bedroom.
The kitchen is open for entertaining.
**Caution** the spirits don't like guests.  
But what if you want to search for a literal asterisk * character? In basic regular expressions, the backslash \ character is as an escape character, meaning the character immediately following it will be interpreted as a literal character, instead of an operator.

To look for a literal asterisk * character, escape it by placing a backslash \ character before the * character:

sysadmin@localhost:~/Documents$ grep 're\*' newhome.txt
**Beware** of the ghost in the bedroom.
The backslash \ character behaves slightly differently depending on whether or not you are in the realm of basic or extended regular expressions, and whether or not you are using basic or extended operators.

The Realm of Basic Regular Expressions
When you use the grep command without the -E option, you are in the realm of basic regular expressions. In this realm, basic operators are interpreted as basic operators. And, as seen in the preceding examples, escaping a basic operator (placing a backslash \ character in front of it) forces it to be interpreted as a literal character.

In the realm of basic regular expressions, the extended regular expression operators do not have special meaning; they are interpreted as literal characters. As a result, the backslash \ character has the opposite effect on the extended operators as it does on basic operators. If an extended operator is escaped in basic regular expressions, it acts like an extended operator, instead of a literal character.

Not Escaped	Escaped
Basic Operators

. [ ] ^ * ^ $

Operators	Literal
Extended Operators

? + { } | ( )

Literal	Operators
The Realm of Extended Regular Expressions
When the grep -E or egrep commands are used, you are in the realm of extended regular expressions. This means all regular expression operators (both basic and extended) are interpreted as operators.

Similarly, in extended regular expressions, the backslash \ character treats all operators the same. When an operator is escaped in the realm of extended regular expressions, it is interpreted as a literal character, regardless of whether it is a basic or extended operator.

Not Escaped	Escaped
Basic Operators

. [ ] ^ * ^ $

Operators	Literal
Extended Operators

? + { } | ( )

Operators	Literal


8.6 Using the fgrep Command
If the entire pattern uses no special characters and you need to use a backslash to escape the special meaning of characters, then you should use the fixed strings grep fgrep command. The fgrep command always treats its pattern as literal characters, so you don’t have to use the backslash to escape the regex characters:

sysadmin@localhost:~/Documents$ cat newhome.txt | fgrep '**'
**Warning** it may be haunted.
**Beware** of the ghost in the bedroom.
**Caution** the spirits don't like guests.
sysadmin@localhost:~/Documents$ cat newhome.txt | fgrep '**Warning** it may be haunted.'
**Warning**it may be haunted.

8.7 Options for the grep Command
The man page for the grep command provides basic information about regular expressions, as well as options for the grep, egrep, and fgrep commands. The following table lists some of the more commonly used options:

Option	Meaning
-i	Case insensitive
-v	Invert search results (logically negates criteria) - returns all lines that don't contain the specified pattern
-l	List the file name of content in file matches
-r	Perform a recursive search including subdirectories
-w	Match whole word only
-q	Quietly operate without producing output
The -i option makes the grep command case insensitive, ignoring capitalization in the expression:

sysadmin@localhost:~/Documents$ grep 'i' profile.txt
Hello my name is Joe.
My favorite food is avocados.
sysadmin@localhost:~/Documents$ grep -i 'i' profile.txt
Hello my name is Joe.
I am 37 years old.
My favorite food is avocados.
I have 2 dogs.
The -v option inverts the search, displaying the lines that don't match the expression. The following search pattern matches all lines which do not contain numeric characters:

sysadmin@localhost:~/Documents$ grep -v [0-9] profile.txt
Hello my name is Joe.
My favorite food is avocados.
Normally, the grep command will be able to match the expression, even if it is part of another word. When using the -w option, the expression must match a complete word. This is similar to the word boundary regular expression that was previously mentioned, however, keep in mind that \b works for many commands that support extended regular expressions, while the -w option is specific to the grep command:

sysadmin@localhost:~/Documents$ grep 'am' profile.txt
Hello my name is Joe.
I am 37 years old.
sysadmin@localhost:~/Documents$ grep -w 'am' profile.txt
I am 37 years old.

8.8 Using grep to Search Multiple Files
The grep command can search multiple files if a glob character is used for the file names. Keep in mind that the grep command cannot search a file that the user does not have privileges to read. The following command will search all of the files in the current directory for the Linux pattern:

sysadmin@localhost:~/Documents$ grep 'Linux' ./*
grep: ./School: Is a directory
grep: ./Work: Is a directory
./linux.txt:Linux       is      growing !
./linux.txt:Linux   is      growing !
./linux.txt:Linux       is      growing !
./linux.txt:Linux       is      growing !
./os.csv:1991,Linux,Torvalds
./words:Linux
./words:Linux's
Rather than displaying every line in every file that matches the pattern, it may be preferable to see a list of the file names that have at least one line that matches the pattern. The -l option will list file names that contain matches, rather than the matches themselves:

sysadmin@localhost:~/Documents$ grep -l 'Linux' ./*
grep: ./School: Is a directory
grep: ./Work: Is a directory
./linux.txt
./os.csv
./words
Using the -r option will allow for directory searches to be recursive, rather than just the files in the current directory. Often, this option is used in conjunction with the -l option:

sysadmin@localhost:~/Documents$ grep -rl 'rare' /etc/*
grep: /etc/bind/rndc.key: Permission denied
grep: /etc/gshadow: Permission denied
grep: /etc/gshadow-: Permission denied
grep: /etc/security/opasswd: Permission denied
grep: /etc/shadow: Permission denied
grep: /etc/shadow-: Permission denied
/etc/skel/.bashrc
grep: /etc/ssh/ssh_host_ecdsa_key: Permission denied
grep: /etc/ssh/ssh_host_ed25519_key: Permission denied
grep: /etc/ssh/ssh_host_rsa_key: Permission denied
grep: /etc/ssl/private: Permission denied
grep: /etc/sudoers: Permission denied
grep: /etc/sudoers.d/README: Permission denied
Note

The errors above are generated by directories the user does not have permission to view. It is possible to eliminate this error output from the terminal by redirecting the standard error.

Redirection will be explained in greater detail later in this course.














































































































.
