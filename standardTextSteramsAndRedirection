# 10.2 Standard Output <h1> tag
When a command executes without any errors, the output that is produced is known as standard out, also called stdout or STDOUT. By default, this output will be sent to the terminal where the command is being executed.

It is possible to redirect standard out from a command so it will go to a file instead of the terminal. Standard output redirection is achieved by following a command with the greater-than > character and a destination file. For example, the ls ~ command will list the files in the home directory. To save a list of the files in the home directory, you must direct the output into a text file. To create the /tmp/home.txt file:

sysadmin@localhost:~$ ls ~ > /tmp/home.txt
After which, the home.txt file will resemble:

sysadmin@localhost:~$ cat /tmp/home.txt
Desktop
Documents
Downloads
Music
Pictures
Public‌
Templates
Videos
Redirecting output using a single greater-than > character will create a new file, or overwrite the contents of an existing file with the same name. Redirecting standard output with two greater-than >> characters will also create a new file if it does not exist. The difference is that when using the >> characters, the output of the command will be appended to the end of a file if it does already exist. For example, to append to the file that was created by the previous command, execute the following:

sysadmin@localhost:~$ date >> /tmp/home.txt
Which will update the home.txt file to:

sysadmin@localhost:~$ cat /tmp/home.txt
Desktop
Documents
Downloads
Music
Pictures
Templates
Videos
Thu Oct  2 17:36:02 UTC 2020
There is a number associated with the standard output file descriptor (the > character): the number 1 (one). However, since standard output is the most commonly redirected command output, the number can be omitted. Technically, the commands should be executed as shown below:

sysadmin@localhost:~$ ls 1> /tmp/ls.txt
sysadmin@localhost:~$ date 1>> /tmp/ls.txt
COMMAND > FILE
COMMAND 1> FILE
Create or overwrite FILE with the standard output of COMMAND
COMMAND >> FILE
COMMAND 1>> FILE
Create or append to FILE with the standard output of COMMAND

10.3 Standard Error
When a command encounters an error, it will produce output that is known as standard error, also called stderr or STDERR. Like standard out, the standard error output is normally sent to the same terminal where the command is currently being executed. The number associated with the standard error file descriptor is 2 (two).

If you tried to execute the ls /junk command, then the command would produce standard error messages because the /junk directory does not exist.

sysadmin@localhost:~$ ls /junk
ls: cannot access /junk: No such file or directory
Because this output goes to standard error, the greater-than > character alone will not successfully redirect it, and the output of the command will still be sent to the terminal:

sysadmin@localhost:~$ ls /junk > output
ls: cannot access /junk: No such file or directory
To redirect these error messages, you must use the correct file descriptor, which for standard error is the number 2. Execute the following, and the error will be redirected into the /tmp/ls.err file:

sysadmin@localhost:~$ ls /junk 2> /tmp/ls.err
Just like standard output, the use of a single > character for redirection will either create the file if it doesn’t exist or clobber (overwrite) an existing file's contents. To prevent clobbering an existing file when redirecting standard error, use the double >> characters after the number 2 to append instead:

sysadmin@localhost:~$ ls /junk 2>> /tmp/ls.err
The /tmp/ls.err file now contains the redirected error messages:

sysadmin@localhost:~$ cat /tmp/ls.err
ls: cannot access '/junk': No such file or directory
ls: cannot access '/junk': No such file or directory
COMMAND 2> FILE
Create or overwrite FILE with the standard error of COMMAND
COMMAND 2>> FILE
Create or append to FILE with the standard error of COMMAND
Some commands will produce both stdout and stderr output:

sysadmin@localhost:~$ find /etc -name passwd
/etc/pam.d/passwd
/etc/passwd
find: '/etc/ssl/private': Permission denied
These two different outputs can be redirected into two separate files by using the following syntax:

sysadmin@localhost:~$ find /etc -name passwd > /tmp/output.txt 2> /tmp/error.txt
The cat command can be used to verify the success of the redirection above:

sysadmin@localhost:~$ cat /tmp/output.txt
/etc/pam.d/passwd
/etc/passwd
sysadmin@localhost:~$ cat /tmp/error.txt
find: '/etc/ssl/private': Permission denied
Sometimes it isn't useful to have the error messages displayed in the terminal or stored in a file. To discard these error messages, use the /dev/null file.

The /dev/null file is like a trash can, where anything sent to it disappears from the system; it's sometimes called the bit bucket or black hole. Any type of output can be redirected to the /dev/null file; most commonly users will redirect standard error to this file, rather than standard output.

The syntax to use the /dev/null file is the same as it is for redirecting to a regular file:

sysadmin@localhost:~$ find /etc -name passw 2> /dev/null
/etc/pam.d/passwd
/etc/passwd
What if you wanted all output (standard error and standard out) sent to one file? There are two techniques to redirect both standard error and standard out:

sysadmin@localhost:~$ ls > /tmp/ls.all 2>&1
sysadmin@localhost:~$ ls &> /tmp/ls.all  
Both of the preceding command lines will create a file called /tmp/ls.all that contains all standard out and standard error. The first command redirects stdout to /tmp/ls.all and the 2>&1 expression means "send stderr wherever stdout is going". In the second example, the &> expression means "redirect all output".

A similar technique can be used to append all output to a single file:

sysadmin@localhost:~$ ls /etc/au* >> /tmp/ls.all 2>&1
sysadmin@localhost:~$ ls /etc/au* &>> /tmp/ls.all
COMMAND &> FILE
COMMAND > FILE 2>&1
Create or overwrite FILE with all output (stdout, stderr) of COMMAND
COMMAND &>> FILE
COMMAND >> FILE 2>&1
Create or append to FILE with all output (stdout, stderr) of COMMAND

10.4 Standard Input
Standard in, also called stdin or STDIN, normally comes from the keyboard with input provided by the user who runs the command. Although most commands are able to read input from files, there are some that expect the user to enter it using the keyboard.

Note

One common way that text files are used as standard input for commands is by creating script files. Scripts are plain text files which are interpreted by the shell when given the proper permissions and prefaced with #!/bin/sh on the first line, which tells the shell to interpret the script as standard input:

 GNU nano 2.9.3                  examplescriptfile.sh

#!/bin/sh
echo HelloWorld
When the script file is invoked at the prompt using the ./ syntax, the shell will run all commands in the script file and return the result to the terminal window, or wherever the output is specified to be sent to:

sysadmin@localhost:~$ ./examplescriptfile.sh
HelloWorld
One example of a command, that isn’t normally executed properly from a text file, is the cd command. When the following script is run in the terminal, it is run as a child process, however, in order to successfully change to another directory, the cd command must be run as a parent process. Consider the example testcd.sh script file below, which specifies to use the cd command to change to the School directory then use the echo command to print the string HelloWorld:

  GNU nano 2.9.3                      testcd.sh

#!/bin/sh
cd /home/sysadmin/Documents/School
echo HelloWorld



                                [ Read 3 lines ]
^G Get Help  ^O Write Out ^W Where Is  ^K Cut Text  ^J Justify   ^C Cur Pos
^X Exit      ^R Read File ^\ Replace   ^U Uncut Text^T To Linter ^_ Go To Line
When we try to run the testcd.sh script the following occurs:

sysadmin@localhost:~$ ./testcd.sh                                               
HelloWorld                 
The script executes the echo command and prints HelloWorld, but the cd command cannot run as a parent process, so we are still in the directory where we started.

Therefore, even though the standard input doesn’t return an error, it won’t create the desired outcome of changing the directory to /home/sysadmin/Documents/School. However, when the standard input is typed by a user, and the desired directory is provided as an argument to the cd command at the command line, it functions normally:

sysadmin@localhost:~$ cd /home/sysadmin/Documents/School
sysadmin@localhost:~/Documents/School$
Scripting is covered in greater detail later in the NDG Introduction to Linux 2.

In some cases, it is useful to redirect standard input, so it comes from a file instead of the keyboard. A good example of when input redirection is desirable involves the tr command. The tr command translates characters by reading data from standard input; translating one set of characters to another set of characters and then writing the changed text to standard output.

For example, the following tr command would take input from a user (via the keyboard) to perform a translation of all lowercase characters to uppercase characters. Execute the following command, type some text, and press Enter to see the translation:

sysadmin@localhost:~$ tr 'a-z' 'A-Z'
hello
HELLO
The tr command doesn't stop reading from standard input unless it's terminated or receives an "End of Transmission" character. This can be accomplished by typing Ctrl+D.

The tr command won't accept a file name as an argument on the command line. To perform a translation using a file as input, utilize input redirection. To use input redirection, type the command with its options and arguments followed by the less-than < character and a path to a file to use for input. For example:

sysadmin@localhost:~$ cat Documents/animals.txt
1 retriever
2 badger
3 bat
4 wolf
5 eagle
sysadmin@localhost:~$ tr 'a-z' 'A-Z' < Documents/animals.txt
1 RETRIEVER
2 BADGER
3 BAT
4 WOLF
5 EAGLE
The output shows the animals.txt file "translated" into all uppercase characters.

COMMAND < FILE
Use FILE as standard input to COMMAND
Important

Do not attempt to use the same file for input and output redirection, as the results are probably not desirable (you end up losing all data). Instead, capture the output and place it into another file; use a different file name as shown below:

sysadmin@localhost:~$ tr 'a-z' 'A-Z' < Documents/animals.txt > animals.new


10.5 Command Pipelines
Command pipelines are often used to make effective use of filter commands. In a command pipeline, the output of one command is sent to another command as input. In Linux and most operating systems, the vertical bar or pipe | character is used between two commands to represent a command pipeline.

For example, imagine that the output of the history command is very large. To send this output to the less command, which displays one "page" of data at a time, the following command pipeline can be used:

sysadmin@localhost:~$ history | less
Note

To exit the less pager command, press the Q key.

Even better, take the output of the history command and filter the output by using the grep command. In the following example, the text output by the history command is redirected to the grep command as input. The grep command matches the ls strings and sends its output to standard out:

sysadmin@localhost:~$ history | grep "ls"
   1  ls ~ > /tmp/home.txt
    5  ls l> /tmp/ls.txt
    6  ls 1> /tmp/ls.txt
    7  date 1>> /tmp/ls.txt
    8  ls /junk
    9  ls /junk > output
   10  ls /junk 2> /tmp/ls.err
   11  ls /junk 2>> /tmp/ls.err
   14  ls > /tmp/ls.all 2>&1
   15  ls &> /tmp/ls.all
   16  ls /etc/au* >> /tmp/ls.all 2>&1
   17  ls /etc/au* &>> /tmp.ls.all
   20  history | grep "ls"
Command pipelines become really powerful when three or more commands are combined. For example, view the contents of the os.csv file in the Documents directory:

sysadmin@localhost:~$ cat Documents/os.csv
1970,Unix,Richie
1987,Minix,Tanenbaum
1970,Unix,Thompson
1991,Linux,Torvalds
The following command line will extract some fields from the os.csv file with the cut command, then sort these lines with the sort command, and finally eliminate duplicate lines with the uniq command:

sysadmin@localhost:~$ cut -f1 -d',' Documents/os.csv | sort -n | uniq
1970
1987
1991

10.6 tee Command
A server administrator works like a plumber, using pipes, and the occasional tee command. The tee command splits the output of a command into two streams: one directed to standard output, which displays in the terminal, and the other into a file.

The tee command can be very useful to create a log of a command or a script. For instance, to record the runtime of a process, start with the date command and make a copy of the output into the timer.txt file:

sysadmin@localhost:~$ date | tee timer.txt
Fri Nov  7 02:21:24 UTC 2020
The timer.txt file now contains a copy of the date, the same output displayed in the preceding example:

sysadmin@localhost:~$ cat timer.txt
Fri Nov  7 02:21:24 UTC 2020
Run the process that needs to be timed. The sleep command is being substituted for a timed process; it pauses for a given number of seconds:

sysadmin@localhost:~$ sleep 15
Then run the date command again. This time, append the time to the end of the timer.txt file by using the -a option:

sysadmin@localhost:~$ date | tee -a timer.txt
Fri Nov  7 02:28:43 UTC 2020
Both times will then be recorded in the file.

sysadmin@localhost:~$ cat timer.txt
Fri Nov  7 02:21:24 UTC 2020
Fri Nov  7 02:28:43 UTC 2020
To run all of the above commands as a single command, use a semicolon ; character as a separator:

sysadmin@localhost:~$ date | tee timer.txt; sleep 15; date | tee -a timer.txt
Fri Nov  7 02:35:47 UTC 2020
Fri Nov  7 02:36:02 UTC 2020
The command above will display and record the first output of the date command, pause for 15 seconds, then display and record the output of the second date command. The timer.txt file now contains a permanent log of the runtime.

‌⁠​​⁠​ 
sysadmin@localhost:~$ cat timer.txt
Fri Nov  7 02:35:47 UTC 2020
Fri Nov  7 02:36:02 UTC 2020

10.7 xargs Command
A command’s options and parameters are usually specified on the command line, as command line arguments. Alternatively, we can use the xargs command to gather arguments from another input source (such as a file or standard input) and then pass those arguments to a command. The xargs command can be called directly and will accept any input:

sysadmin@localhost:~$ xargs
Hello
There
To exit the xargs command, press Ctrl+C.

The default action of the xargs command is to pass the input to echo command when another command does not explicitly follow it. Upon pressing Ctrl+D, the xargs command will send the input to the echo command:

Hello There
sysadmin@localhost:~$
Important

Pressing Ctrl+D after exiting the xargs command by using Ctrl+C will log you out of the current shell. To send the input of the xargs command to the echo command without logging out of the shell, press Ctrl+D while you are still running the xargs command.

The xargs command is most useful when it is called in a pipe. In the next example, four files will be created using the touch command. The files will be named 1a, 1b, 1c, and 1d based on the output of the echo command.

sysadmin@localhost:~$$ echo '1a 1b 1c 1d' | xargs touch
sysadmin@localhost:~$ ls
1a  1c  Desktop    Downloads  Pictures  Templates  timer.txt
1b  1d  Documents  Music      Public    Videos
These four files can be removed just as easily by changing the touch command to the rm command:

sysadmin@localhost:~$ echo '1a 1b 1c 1d' | xargs rm
sysadmin@localhost:~$ ls
Desktop    Downloads  Pictures  Templates  timer.txt
Documents  Music      Public    Videos
A delimiter can be set using the -d option with the xargs command. To view the contents of the ~/Documents directory containing the word alpha with all instances of the dash - character replaced with a space, type the following:

sysadmin@localhost:~$ cd Documents/
sysadmin@localhost:~/Documents$ ls | grep alpha | xargs -d '-'
alpha first.txt
alpha second.txt
alpha third.txt
alpha.txt
The double pipe as the output of the ls command became the input of the grep command, and finally the xargs command.

In the following example, the red.txt file will be used as the input of the xargs command:

sysadmin@localhost:~/Documents$ cat red.txt
red
reef
rot
reeed
rd
rod
roof
reed
root
reel
read
Before running the xargs command, the contents of the ~/Documents directory are:

sysadmin@localhost:~/Documents$ ls
School            alpha-third.txt  hidden.txt    numbers.txt  spelling.txt
Work              alpha.txt        letters.txt   os.csv       words
adjectives.txt    animals.txt      linux.txt     people.csv
alpha-first.txt   food.txt         longfile.txt  profile.txt
alpha-second.txt  hello.sh         newhome.txt   red.txt
After running the xargs command with the touch command, eleven new files appear:

sysadmin@localhost:~/Documents$ cat red.txt | xargs touch
sysadmin@localhost:~/Documents$ ls
School            alpha.txt    linux.txt     profile.txt  reeed  rot
Work              animals.txt  longfile.txt  rd           reef   spelling.txt
adjectives.txt    food.txt     newhome.txt   read         reel   words
alpha-first.txt   hello.sh     numbers.txt   red          rod
alpha-second.txt  hidden.txt   os.csv        red.txt      roof
alpha-third.txt   letters.txt  people.csv    reed         root
In the previous example, the output of the cat command was used as input to the touch command using xargs and a command-line pipe. The xargs command can also be used with pipes to send the output of a command as an argument to another command:

sysadmin@localhost:~$ find ~ -maxdepth 1 -name 'D*' | xargs du -sh
4.0K    /home/sysadmin/Downloads
1.2M    /home/sysadmin/Documents
4.0K    /home/sysadmin/Desktop
In the example above, the find command output is used as an argument to the du disk usage command using the xargs command. The first command preceding the pipe finds all file names that match the D* pattern. The output of the find command is then passed to the du command as an argument to display the disk usage of the files.

Consider This

The xargs command has many, many more options that can be studied using the corresponding man page.









































































































































.

