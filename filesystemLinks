#############################################################################################################
14.2 Soft Links
Soft links, also known as symbolic links, are files that are designed to point to other files via path names. For example, the /bin/systemd file is a symbolic link that links to /lib/systemd/systemd.

If it seems odd that anyone would want a file that points to another file, then consider the "Shortcuts" located on most desktops and menu bars. It is common for users to place icons on the Desktop that, when clicked, will run a program or open a file. Those icons are actually files that point to other files; in other words, those icons are soft links.

As the Linux system grows and transforms, the organization of programs also changes. To retain some backward compatibility for programs and processes, and to make it easier for users and administrators, symbolic links are created which allow the use of programs from their legacy locations.

Another advantage of using links is that as programs are updated and version numbers change, administrators don’t need to remember the exact file name, version, and extension to run the program—as long as the link points to the current program. Sometimes entire command names are switched out, but the old name is kept as an alias; for example, the vi command runs vim. Symbolic links on the system are stored in the /etc/alternatives directory where they are managed by the alternatives system. The alternatives system manages, maintains, and updates information about the symbolic links so that system administrators can define which program and version are run when a user types a generic command.

This system allows developers to update information about their programs in the appropriate file in the /etc/alternatives directory. Additionally, system administrators can modify these files to specify which program is executed when the user types a command. So, if a user types ls at the prompt, it can be interpreted by the system as ls.bin.1.1.2, or new_ls.bin.00.2.1.37.x, or whichever file needs to respond to the basic command typed into the console.

Links are organized into groups according to the functionality that the programs have. By default, the system automatically takes care of updating these groups when program files are installed or updated. This way, most users do not need to be aware of changes in the underlying program files that provide the functionality required when they invoke a program.

Consider This

More detail about the alternatives system can be found in the update-alternatives man page:

sysadmin@localhost:~$ man update-alternatives
Soft links are very visual compared to hard links. This is because soft links are distinguishable by their file type.

For example, a detailed listing of the /bin/systemd file shows that it is a symbolic link that points to the /lib/systemd/systemd file:

sysadmin@localhost:~$ ls -l /bin/systemd
lrwxrwxrwx 1 root root 20 Feb 28 21:03 /bin/systemd -> /lib/systemd/systemd
While this is helpful for regular users, it can sometimes be a disadvantage, as certain programs may refuse to work with the symbolic link type file and might require a regular file.

In a detailed listing of a symbolic link, notice that the first character preceding the permissions is the letter l:

lrwxrwxrwx 1 root root 20 Feb 28 21:03 /bin/systemd -> /lib/systemd/systemd  
‌⁠​​⁠​ 
The other thing to notice about listing a soft link is that the link file name is followed by an arrow, which points to a path name:

lrwxrwxrwx 1 root root 20 Feb 28 21:03 /bin/systemd -> /lib/systemd/systemd
When accessing the /bin/systemd file, the link is followed, and the /lib/systemd/systemd file is accessed instead. In other words, the less /bin/systemd command will really display the content of the /lib/systemd/systemd file.

The permissions that appear on the soft link only determine who may attempt to follow the link. Typically, the permissions on the soft link are rwx for all users. The permissions on the file that has been linked to will determine the actual or effective permissions that a user will have, if they attempt to follow the link.

For example, the permissions on the /bin/systemd file are rwxrwxrwx, which indicate that everyone would have full access on the link file.

However, examining the permissions on the /lib/systemd/systemd file shows that only the root user would have write access to the file:

sysadmin@localhost:~$ ls -l /lib/systemd/systemd
-rwxr-xr-x 1 root root 1595792 Feb 28 21:03 /lib/systemd/systemd
To create a soft link file, use the ln command with the -s option. The first argument is the original file name, and the second argument is the name of the link to be created.

ln -s TARGET LINK_NAME
Be sure to put the arguments in the correct order, as it is not possible to create a link from a file name that already exists. In the following example, we will create a file called file1.txt and attempt to create a soft link file called file2.txt:

sysadmin@localhost:~$ touch file1.txt
sysadmin@localhost:~$ ln -s file2.txt file1.txt
ln: failed to create symbolic link `file1.txt': File exists 
Switch the arguments from the example above around, and a symbolic link is successfully created:

sysadmin@localhost:~$ ln -s file1.txt file2.txt
sysadmin@localhost:~$ ls -l file*
-rw-rw-r-- 1 sysadmin sysadmin 0 May  9 02:48 file1.txt
lrwxrwxrwx 1 sysadmin sysadmin 9 May  9 02:49 file2.txt -> file1.txt
Unlike hard links, soft link files do not increase the link count number associated with a regular file. In the above example, the link count number for the ./file1.txt file would stay at one, regardless of how many soft or symbolic link files were created to refer to that file. Recall that the link count is the number immediately following the permissions field:

-rw-r--r-- 1 sysadmin sysadmin May 9 14:39 file1.txt
lrwxrwxrwx 1 sysadmin sysadmin May 9 14:39 file2.txt -> file1.txt

#############################################################################################################
14.3 Hard Links
Hard link files are just like regular files except that they share an inode with another file. This means that although the path names for the hard linked files may be different, everything else about them is identical. This sometimes gives hard links the advantage over soft links in that programs are unable to distinguish between a regular file and a hard linked file.

To understand hard links, it is helpful to understand a little bit about how the file system keeps track of files. For every file created, there is a block of data on the file system that stores the metadata of the file. Metadata includes information about the file like the permissions, ownership, and timestamps. Metadata does not include the file name or the contents of the file, but it does include just about all other information about the file.

This metadata is called the file's inode table. The inode table also includes pointers to the other blocks on the file system called data blocks where the data is stored.

Every file on a partition has a unique identification number called an inode number. The ls -i command displays the inode number of a file.

sysadmin@localhost:~$ ls -i ~/Documents/linux.txt                               
73798439 /home/sysadmin/Documents/linux.txt
Like users and groups, what defines a file is not its name, but rather the number it has been assigned. The inode table does not include the file name. For each file, there is also an entry that is stored in a directory's data area (data block) that includes an association between an inode number and a file name.

In the data block for the /etc directory, there would be a list of all of the files in this directory and their corresponding inode number. For example:

File Name	Inode Number
passwd	123
shadow	175
group	144
gshadow	897
When you attempt to access the /etc/passwd file, the system uses this table to translate the file name into an inode number. It then retrieves the file data by looking at the information in the inode table for the file.

Hard links are two file names that point to the same inode. For example, consider the following directory entries:

File Name	Inode Number
passwd	123
mypasswd	123
shadow	175
group	144
gshadow	897
Because both the passwd and mypasswd files have the same inode number, they essentially are the same file. You can access the file data using either file name.

When you execute the ls -li command, the number that appears for each file between the permissions and the user owner is the link count number:

sysadmin@localhost:~$ echo data > file.original
sysadmin@localhost:~$ ls -li file.original
278772 -rw-rw-r--. 1 sysadmin sysadmin 5 Oct 25 15:42 file.original
The link count number indicates how many hard links have been created. When the number is a value of one, then the file has only one name linked to the inode.

To create hard links, the ln command is used with two arguments (and without the -s option). The first argument is an existing file name to link to, called a target, and the second argument is the new file name to link to the target.

ln TARGET LINK_NAME
When a hard link is created, the link count value is increased by a value of one. For example, the following example demonstrates using the ln command to create a hard link file. Notice the link count (the number after the permissions) before and after the hard link was created:

Note

The sudo command requires the root password. When prompted, enter netlab123.

sysadmin@localhost:~$ cd Documents/
sysadmin@localhost:~/Documents$ ls -l profile.txt
-rw-r--r-- 1 sysadmin sysadmin 110 Apr 24 16:24 profile.txt
sysadmin@localhost:~/Documents$ ln profile.txt myprofile.txt
sysadmin@localhost:~/Documents$ ls -l profile.txt
-rw-r--r-- 2 sysadmin sysadmin 110 Apr 24 16:24 profile.txt
When viewing hard link files, the ls -i option can be helpful to validate that the files are in fact sharing an inode, as the option causes the inode number to be displayed in front of the permissions. For example, notice that the following two files both have the same inode number:

sysadmin@localhost:~/Documents$ ls -li profile.txt myprofile.txt
95813671 -rw-r--r-- 2 sysadmin sysadmin 110 Apr 24 16:24 myprofile.txt
95813671 -rw-r--r-- 2 sysadmin sysadmin 110 Apr 24 16:24 profile.txt
Note

The inode number in our virtual machine environment will likely be different than the one in the example.


#############################################################################################################
14.4 Soft Links vs. Hard Links
Which is better: soft or hard links? The answer isn't so straightforward as it really depends on several criteria. Consider the following:

Hard Link Advantages
Hard linked files are indistinguishable by programs from regular files.

If files are hard linked, then they are always contained within one filesystem.

Hard links don’t have a single point of failure.

Once files are hard linked together, there is no concept of the original. Each file is equal, and if one link is deleted, the others still work, you don't lose the data. As long as one hard link remains, the file data can be accessed.

This is unlike soft links in which the data is stored in the file that is being pointed to, meaning that if the original file is removed, all of the soft links are now pointing to nothing. Consider the following example in which access to the data fails if the original file is deleted. The mytest.txt file is a symbolic link to the text.txt file:

Note

The test.txt and mytest.txt files do not exist in our virtual environment.

sysadmin@localhost:~$ ls -l mytest.txt
lrwxrwxrwx. 1 sysadmin sysadmin 8 Oct 31 13:29 mytest.txt -> test.txt
sysadmin@localhost:~$ more test.txt
hi there
sysadmin@localhost:~$ more mytest.txt
hi there
If the original file, the test.txt file is removed, then any files linked to it, including the mytest.txt file, fail:

sysadmin@localhost:~$ rm test.txt
sysadmin@localhost:~$ more mytest.txt
mytest.txt: No such file or directory
sysadmin@localhost:~$ ls -l mytest.txt
lrwxrwxrwx. 1 sysadmin sysadmin 8 Oct 31 13:29 mytest.txt -> test.txt
Hard links are easier to locate.

One of the disadvantages of soft links is that it is not easy to tell if a file has a soft link pointing to it. For example, look at the output of the following ls command:

sysadmin@localhost:~/Documents$ cd /bin
sysadmin@localhost:/bin$ ls -l dash
-rwxr-xr-x 1 root root 121272 Feb 19  2014 dash
The /bin/sh file is a symbolic link to the /bin/dash file, but this is not apparent by looking at the original file.

sysadmin@localhost:/bin$ ls -l sh
lrwxrwxrwx 1 root root 4 Mar  8 19:08 sh -> dash
On the other hand, a regular file with a hard link count value greater than one is a file that has a hard link. Using the file's inode number, it is possible to find all the linked files by using the find command with the -inum option. For example:

sysadmin@localhost:/bin$ cd ~/Documents
sysadmin@localhost:~/Documents$ ls -i words
48365918 words
sysadmin@localhost:~/Documents$ find -inum 48365918
./words
./mywords
Note

The inode number in our virtual machine environment will likely be different than the one in the example.

Soft Link Advantages
Soft links can be made to a directory file; hard links cannot.

Another limitation of hard links is that they cannot be created on directories. The reason for this limitation is that the operating system itself uses hard links to define the hierarchy of the directory structure. The following example shows the error message that is displayed if you attempt to hard link to a directory:

sysadmin@localhost:~/Documents$ cd
sysadmin@localhost:~$
sysadmin@localhost:~$ ln /bin binary
ln: `/bin': hard link not allowed for directory
Linking to directories using a symbolic link is permitted:

sysadmin@localhost:~$ ln -s /bin binary
sysadmin@localhost:~$ ls -l binary
lrwxrwxrwx 1 sysadmin sysadmin 4 May  9 04:04 binary -> /bin
Soft links can link to any file.

Soft links can be made from a file on one filesystem to a file on another filesystem; hard links cannot. Since each filesystem (partition) has a separate set of inodes, hard links cannot be created that attempt to cross file systems:

Note

The /boot/vmlinuz-2.6.32-358.6.1.e16.i686Linux.Kernel files do not exist in our virtual environment.

sysadmin@localhost:~$ ln /boot/vmlinuz-2.6.32-358.6.1.el6.i686 Linux.Kernel
ln: creating hard link `Linux.Kernel' => `/boot/vmlinuz-2.6.32-358.6.1.el6.i686': Invalid cross-device link
In the previous example, an attempt was made to create a hard link between a file in the /boot file system and the / file system; it failed because each of these file systems has a unique set of inode numbers that can't be used outside of the filesystem.

However, because a symbolic link points to another file using a pathname, you can create a soft link to a file in another filesystem:

sysadmin@localhost:~$ ln -s /boot/vmlinuz-2.6.32-358.6.1.el6.i686 Linux.Kernel
sysadmin@localhost:~$ ls -l Linux.Kernel
lrwxrwxrwx. 1 sysadmin sysadmin 11 Oct 31 13:17 Linux.Kernel -> /boot/vmlinuz-2.6.32-358.6.1.el6.i686
Soft links are easier to see.

Soft links are very visual because the output of the ls -l command displays which file the soft link is pointing to.

In general, if you need to link to a file on another filesystem or to a directory, then soft links are the correct type to use. Otherwise, you should make use of hard links.


#############################################################################################################











