9.1 Introduction
Since vi is part of the Single UNIX Specification (SUS), it is required that conforming UNIX-based systems have it.


In reality, most Linux systems don't include the original vi, but instead include an improved version of it, known as vim, for vi improved. This fact may be hidden by most Linux distributions. On some distributions, the vi file will link to vim:

sysadmin@localhost:~$ which vi
/usr/bin/vi
sysadmin@localhost:/etc/alternatives$ ls -l vi
lrwxrwxrwx 1 root root 17 Mar  2  2016 vi -> /usr/bin/vim.tiny
‌⁠​​⁠​ While on other distributions, an alias exists that will execute vim when the vi command is run:

[sysadmin@localhost ~]$ which vi
alias vi='vim'
/usr/bin/vim
‌⁠​​⁠​ 
For the most part, vim works just like vi but has additional features, including the ability to use the arrow ←↓↑→ keys for navigation.

For the topics that will be covered in this course, either vi or vim will work. For simple editing tasks, nano is available on many systems. Users who don’t have all the keyboard commands memorized that are needed for vi will appreciate its menu at the bottom of the editing screen and straightforward command structure.

On the other end of the spectrum is the emacs editor, an “extensible, customizable, self-documenting real-time display editor.” For programmers and others that need sophisticated editing tools in a command line environment, this piece of GNU software provides maximum capability and flexibility. Emacs goes far beyond just text editing with a built-in Lisp programming interpreter and content-aware editing modes that allow syntax coloring for different file types. It includes a packaging system for downloading and installing custom user extensions to expand its capabilities, which include project planning, mail and news readers, debuggers, calendars, and many other productivity tools. Emacs also has a built-in documentation system with tutorials, and full Unicode support for almost every character set and script imaginable, so practically anyone can use it in their native language. Essentially, it’s a power tool for power users that can perform as an infinitely customizable user interface for those that wish to control every aspect of their systems.

This chapter will mainly focus on how to use vi and how to configure the default editor in the shell. To get started using the vi editor, simply type the command, followed by the path name of the file to edit or create:

sysadmin@localhost:~$ vi newfile

9.2 Command Mode Movement
There are three modes used in the vi editor: command mode, insert mode, and ex mode.

Initially, the program starts in command mode. Command mode is used to type commands, such as those used to move around a document, manipulate text, and access the other two modes. To return to command mode at any time, press the Esc key.

Once some text has been added into a document, to perform actions like moving the cursor, the Esc key needs to be pressed first to return to command mode. This seems like a lot of work, but remember that vi works in a terminal environment where a mouse is useless.

Movement commands in vi have two aspects: a motion and an optional number prefix, which indicates how many times to repeat that motion. The general format is as follows:

[count] motion
The following table summarizes the motion keys available:

‌⁠​​⁠​ 
Motion	Result
h	Left one character
j	Down one line
k	Up one line
l	Right one character
w	One word forward
b	One word back
^	Beginning of the line
$	End of the line
Note

Since the upgrade to vim, it is also possible to use the arrow ←↓↑→ keys instead of hjkl respectively.

These motions can be prefixed with a number to indicate how many times to perform the movement. For example, the 5h command would move the cursor five characters to the left and 3w would move the cursor three words to the right.

To move the cursor to a specific line number, type that line number followed by the G character. For example, to get to the fifth line of the file, type the 5G command. The 1G or gg commands can be used to go to the first line of the file, while a single G will take you to the last line. To find out which line the cursor is currently on, use Ctrl+G.

9.3 Command Mode Actions
The standard convention for editing content with word processors is to use copy, cut, and paste. The vi program does not use these; instead, it uses the following three commands:

‌⁠​​⁠​ 
Standard	Vi	Meaning
cut	d	delete
copy	y	yank
paste	P | p	put
The motions learned from the previous page are used to specify where the action is to take place, always beginning with the present cursor location. Either of the following general formats for action commands is acceptable:

action [count] motion
[count] action motion
Delete
Delete removes the indicated text from the page and saves it into the buffer, the buffer being the equivalent of the "clipboard" used in Windows or Mac OSX. The following table provides some common usage examples:

Action	Result
dd	Delete the current line
3dd	Delete the next three lines
dw	Delete the current word
d3w	Delete the next three words
d4h	Delete four characters to the left
Change
Change is very similar to delete, where the text is removed and saved into the buffer. However, when using change, the program is switched to insert mode to allow immediate changes to the text. The following table provides some common usage examples:

Action	Result
cc	Change the current line
cw	Change the current word
c3w	Change the next three words
c5h	Change five characters to the left
Yank
Yank places content into the buffer without deleting it. The following table provides some common usage examples:

Action	Result
yy	Yank the current line
3yy	Yank the next three lines
yw	Yank the current word
y$	Yank to the end of the line
Put
Put places the text saved in the buffer either before or after the cursor position. Notice that these are the only two options as put does not use the motions like the previous action commands.

Action	Result
p	Put (paste) after the cursor
P	Put before cursor
Searching in vi
Another standard function that word processors offer is the find function. Often, people use Ctrl+F or look under the edit menu. The vi program uses search. Search is more powerful than find because it supports both literal text patterns and regular expressions.

To search forward from the current position of the cursor, use the slash / character to start the search, type a search term, and then press the Enter key to begin the search. The cursor will move to the first match that is found.

To proceed to the next match using the same pattern, press the N key. To go back to a previous match, press the Shift+N key combination. If the end or the beginning of the document is reached, it will automatically wrap around to the other side of the document.

To start searching backward from the cursor position, start by typing ?, then type the pattern to search for matches and press the Enter key.

Action	Result
/term	Search forwards for term
?term	Search backward for term

9.4 Insert Mode
Insert mode is used to add text to the document. There a few ways to enter insert mode from command mode, each differing by where the text insertion will begin. The following table covers the most common. After using one of these commands, you may enter text. To return to command mode, use the Esc key.

Input	Purpose
a	Enter insert mode right after the cursor
A	Enter insert mode at the end of the line
i	Enter insert mode right before the cursor
I	Enter insert mode at the beginning of the line
o	Enter insert mode on a blank line after the cursor
O	Enter insert mode on a blank line before the cursor

9.5 Ex Mode
Originally, the vi editor was called the ex editor. The name vi was the abbreviation of the visual command inside the ex editor that switched the editor to "visual" mode.

In the original normal mode, the ex editor only allowed users to see and modify one line at a time. In the visual mode, users could see as much of the document that will fit on the screen. Since most users preferred the visual mode to the line editing mode, the ex program file was linked to a vi file, so that users could start ex directly in visual mode when they ran the vi link.

Eventually, the actual program file was renamed vi, and the ex editor became a link that pointed to the vi editor.

When the ex mode of the vi editor is being used, it is possible to view or change settings, as well as carry out file-related commands like opening, saving, or aborting changes to a file. In order to get to the ex mode, type a colon : character in command mode. The following table lists some common actions performed in ex mode:

Input	Purpose
:w	Write the current file to the filesystem
:w filename	Save a copy of the current file as filename
:w!	Force writing to the current file
:1	Go to line number 1 or whatever number is given
:e filename	Open filename
:q	Quit if no changes made to file
:q!	Quit without saving changes to file
A quick analysis of the table above reveals if an exclamation mark ! character is added to a command, then the command attempts to force the operation. For example, imagine you make changes to a file in the vi editor and then try to quit with the :q command, only to discover that the "quit" command fails. The vi editor doesn't want to quit without saving the changes you made to a file, but you can force it to quit with the :q! command.

Note

While it may seem impossible, the vi editor can save changes to a read-only file. The command :w! will try to write to a file, even if it is read-only, by attempting to change the permissions on the file, perform the write to the file, and then change the permissions back to what they were originally.

This means that the root user can make changes to almost any file in the vi editor, regardless of the permissions on the file. However, ordinary users will only be able to force writing to the files that they own. Using vi doesn't change the fact that regular users can't modify the permissions on files that they do not own.

Permissions will be covered in greater detail later in the course.

Although the ex mode offers several ways to save and quit, there's also the ZZ command that is available in command mode; this is the equivalent of :wq. There are many more overlapping functions between ex mode and command mode. For example, ex mode can be used to navigate to any line in the document by typing the colon : character followed by the line number, while the G command can be used in command mode as previously demonstrated.

9.6 Configuring the Standard Editor
There are a number of ways to configure and invoke the standard editor, which is the default text editor on the command-line for the Linux distribution being used. This section will explain two methods to configure the standard editor.

Note

We encourage you to use the terminal as often as possible while reading the chapter content. However, there are places where the output will differ, or you will not be able to reproduce the examples altogether. The examples in this section were designed to introduce a concept, whereas the labs that follow the chapters were designed to take you through the material step-by-step, working with the CLI to give you practical experience.

Typing the /usr/bin/editor command will invoke the standard editor, which in the case of our Ubuntu virtual machine, is VIM.

sysadmin@localhost:~$ /usr/bin/editor
The command above will bring up the default editor window:

~
~
~                              VIM - Vi IMproved
~
~                               version 8.0.1453
~                           by Bram Moolenaar et al.
~           Modified by pkg-vim-maintainers@lists.alioth.debian.org
~                 Vim is open source and freely distributable
~
~                        Help poor children in Uganda!
~                type  :help iccf<Enter>       for information
~
~                type  :q<Enter>               to exit
~                type  :help<Enter>  or  <F1>  for on-line help
~                type  :help version8<Enter>   for version info
~
To exit the window, type the :q command.

There are a number of ways to change the standard editor, but the easiest one on Ubuntu 18.04 is to use the update-alternatives command with the --config editor option. Note that this command requires administrative access. After executing the command, type the selection number of the editor:

Note

The sudo command allows a user to execute a command as another user without creating a new shell. To execute a command with administrative privileges, use it as an argument to the sudo command. The sudo command assumes by default the root user account should be used to execute commands.

Using sudo in our virtual machine environment requires the root password netlab123. As a security measure, the password will not be visible as it is typed.

sysadmin@localhost:~$ sudo update-alternatives --config editor
[sudo] password for sysadmin:
There are 3 choices for the alternative editor (providing /usr/bin/editor).

  Selection    Path               Priority   Status
------------------------------------------------------------
  0            /bin/nano           40        auto mode
  1            /bin/nano           40        manual mode
  2            /usr/bin/mcedit     25        manual mode
* 3            /usr/bin/vim.tiny   15        manual mode

Press <enter> to keep the current choice[*], or type selection number: 0
update-alternatives: using /bin/nano to provide /usr/bin/editor (editor) in auto mode
Now the /usr/bin/editor command will invoke the nano editor as the standard editor instead of the vi editor:

  GNU nano 2.9.3                      New Buffer









^G Get Help  ^O Write Out ^W Where Is  ^K Cut Text  ^J Justify   ^C Cur Pos
^X Exit      ^R Read File ^\ Replace   ^U Uncut Text^T To Spell  ^_ Go To Line

To exit nano, type Ctrl+X.

Another way of changing the standard editor is by editing the .bashrc file. Since the .bashrc file only loads when a new shell is created, it still shows vi as the standard editor; we can confirm this by viewing the $EDITOR variable:

sysadmin@localhost:~$ echo $EDITOR
vi
To edit the .bashrc file using nano , you would type the following command:

sysadmin@localhost:~$ nano .bashrc
The following example shows the environment variables for the standard editor at the bottom of the .bashrc file. To change the standard editor to nano, you would simply change the variables by replacing their current value of vi and setting them to nano:

  GNU nano 2.9.3                       .bashrc                        Modified

# set editor and visual envs to vim
EDITOR=vi
VISUAL=vi

# change to home dir
cd ~

^G Get Help  ^O Write Out ^W Where Is  ^K Cut Text  ^J Justify   ^C Cur Pos
^X Exit      ^R Read File ^\ Replace   ^U Uncut Text^T To Spell  ^_ Go To Line
In order to see these changes, a new shell will need to be opened using the bash command in order to reload the .bashrc file. In the new shell, displaying the $EDITOR variable can be used to confirm the changes:

sysadmin@localhost:~$ echo $EDITOR
nano
Of course, the vi editor will still be available at the command line. To continue to using vi after changing the standard editor, simply type the vi command followed by the path and name of the file to edit or the file you wish to create:

sysadmin@localhost:~$ vi newfile



































































































.
